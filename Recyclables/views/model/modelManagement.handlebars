<style>
* {
  box-sizing: border-box;
}

body {
  background-color: #f1f1f1;
}

#regForm {
  background-color: #ffffff;
  margin: 100px auto;
  font-family: Raleway;
  padding: 40px;
  width: 70%;
  min-width: 300px;
}

h1 {
  text-align: center;  
}

input {
  padding: 10px;
  width: 100%;
  font-size: 17px;
  font-family: Raleway;
  border: 1px solid #aaaaaa;
}

/* Mark input boxes that gets an error on validation: */
input.invalid {
  background-color: #ffdddd;
}

/* Hide all steps by default: */
.tab {
  display: none;
}

button {
  background-color: #04AA6D;
  color: #ffffff;
  border: none;
  padding: 10px 20px;
  font-size: 17px;
  font-family: Raleway;
  cursor: pointer;
}

button:hover {
  opacity: 0.8;
}

#prevBtn {
  background-color: #bbbbbb;
}

/* Make circles that indicate the steps of the form: */
.step {
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbbbbb;
  border: none;  
  border-radius: 50%;
  display: inline-block;
  opacity: 0.5;
}

.step.active {
  opacity: 1;
}

/* Mark the steps that are finished and valid: */
.step.finish {
  background-color: #04AA6D;
}

ul {
  list-style-type: none;
}

li {
  display: inline-block;
}

input[type="checkbox"] {
  display: none;
}

label {
  border: 1px solid #fff;
  padding: 10px;
  display: block;
  position: relative;
  margin: 10px;
  cursor: pointer;
}

label:before {
  background-color: white;
  color: white;
  content: " ";
  display: block;
  border-radius: 50%;
  border: 1px solid grey;
  position: absolute;
  top: -5px;
  left: -5px;
  width: 25px;
  height: 25px;
  text-align: center;
  line-height: 28px;
  transition-duration: 0.4s;
  transform: scale(0);
}

label img {
  height: 100px;
  width: 100px;
  transition-duration: 0.2s;
  transform-origin: 50% 50%;
}

:checked + label {
  border-color: #ddd;
}

:checked + label:before {
  content: "âœ“";
  background-color: grey;
  transform: scale(1);
}

:checked + label img {
  transform: scale(0.9);
  box-shadow: 0 0 5px #333;
  z-index: -1;
}

.container {
  display: flex;
}
.container.space-around {
  justify-content: space-around;
}
</style>
<body>

<form id="regForm" action="/model/confirmModelling" method="get">
  <!-- One "tab" for each step in the form: -->
  {{#if list.length}}
  <div class="tab">
    <h3 style="text-align: center;">Categorize the items for AI training</h3>
    <ul id="list">
      <div class="container space-around">
      <button type="button" class = "btn btn-primary" onclick="changeMaterial()">Change Material Type</button>
      <button type="button" class = "btn btn-danger" onclick="deleteImage()">Delete images</button>
      </div>
      <br>
      
    </ul>
    
  </div>
  <div style="overflow:auto;">
    <div style="float:right;">
      <button type="submit" id="submitBtn">Submit</button>

    </div>
  </div>
  <!-- Circles which indicates the steps of the form: -->
  <div style="text-align:center;margin-top:40px;">
    <span class="step"></span>
  </div>
  {{else}}
    <h3 style="text-align: center;">No images to be processed</h3>
    {{/if}}
</form>

<script>
  // get all photos in folder and display them as images in checkboxes 
  var list = '{{list}}'
  var listarray = list.split(",")
  if (listarray.length > 1){
  for (let i = 0; i < listarray.length; i++){
    var imgfile = listarray[i]
    var type = listarray[i].split("_")[0]
    document.getElementById("list").innerHTML += "<li><figure><input class='checkboxes' name='checkbox[]' type='checkbox' id='" + imgfile + "' /><label for='" + imgfile + "'><img src='/img/" + imgfile + "' /></label><figcaption style='text-align:center;'>" + type + "</figcaption></figure></li>"
  }
  }
  //calls the route to change material type in images for images that are checked
  function changeMaterial(){
    var checkbox = document.getElementsByClassName("checkboxes")
    checkbox = document.querySelectorAll('input[class=checkboxes]:checked');
    var vals = []

    for(var i = 0; i < checkbox.length; i++){
        vals.push(checkbox[i].id)
    }
    console.log(vals)
    $.ajax({
              url: '/model/changeMaterials',
              type: 'POST',
              data: {
                'id': JSON.stringify(vals)
              }
          });
          location.reload();
    }
  //calls the route to delete checked images

    function deleteImage(){
    var checkbox = document.getElementsByClassName("checkboxes")
    checkbox = document.querySelectorAll('input[class=checkboxes]:checked');
    var vals = []

    for(var i = 0; i < checkbox.length; i++){
        vals.push(checkbox[i].id)
    }
    console.log(vals)
    $.ajax({
              url: '/model/deleteImage',
              type: 'POST',
              data: {
                'id': JSON.stringify(vals)
              }
          });
          location.reload();
    }
    

</script>
<script>
var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the current tab
console.log(">>>>>>>>>>>>>",listarray.length)
function showTab(n) {

  // This function will display the specified tab of the form...
  var x = document.getElementsByClassName("tab");
  x[n].style.display = "block";
  //... and fix the Previous/Next buttons:
  if (listarray.length == 0) {
    document.getElementById("submitBtn").style.display = "none";
  } else {
    document.getElementById("submitBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    document.getElementById("submitBtn").innerHTML = "Submit";
  } else {
    document.getElementById("submitBtn").innerHTML = "Next";
  }
  //... and run a function that will display the correct step indicator:
  fixStepIndicator(n)
}

{{!-- function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form...
  if (currentTab >= x.length) {
    // ... the form gets submitted:
    document.getElementById("regForm").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
} --}}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class on the current step:
  x[n].className += " active";
}
</script>

</body>